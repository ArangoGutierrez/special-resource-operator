apiVersion: v1
kind: ServiceAccount
metadata:
  name: nvidia-dcgm-exporter
  namespace: openshift-sro
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nvidia-dcgm-exporter
  namespace: openshift-sro
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged 
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nvidia-dcgm-exporter
  namespace: openshift-sro
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nvidia-dcgm-exporter
subjects:
- kind: ServiceAccount
  name: nvidia-dcgm-exporter
userNames:
- system:serviceaccount:openshift-sro:nvidia-dcgm-exporter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s
  namespace: openshift-sro
rules:
 - apiGroups:
   - ""
   resources:
   - services
   - endpoints
   - pods
   verbs:
   - get
   - list
   - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s
  namespace: openshift-sro
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: openshift-monitoring
---
apiVersion: v1
kind: Service
metadata:
  namespace: openshift-sro
  name: nvidia-dcgm-exporter
  labels:
    app: nvidia-dcgm-exporter
spec:
  selector:
    app: nvidia-dcgm-exporter
  type: ClusterIP
  ports:
  - name: dcgm
    port: 9600
    targetPort: 9600
    protocol: TCP
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  namespace: openshift-sro
  name: nvidia-dcgm-exporter
spec:
  endpoints:
  - port: dcgm 
  jobLabel: app
  namespaceSelector:
    matchNames:
    - openshift-sro
  selector:
    matchLabels:
      app: nvidia-dcgm-exporter
---
# Node exporter collecting only GPU metrics from dcgm-exporter.
# Except textfile collector, all other collectors that are enabled by default are disabled.
# Refer: https://github.com/prometheus/node_exporter/tree/release-0.16
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels: 
    app: nvidia-dcgm-exporter
  name: nvidia-dcgm-exporter
  namespace: openshift-sro
  annotations:
    callback: nvidia-dcgm-exporter
spec:
  selector:
    matchLabels:
      app: nvidia-dcgm-exporter
  template:
    metadata:
      labels:
        app: nvidia-dcgm-exporter
      name: nvidia-dcgm-exporter
    spec:
      tolerations:
      - operator: Exists
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      serviceAccount: nvidia-dcgm-exporter
      serviceAccountName: nvidia-dcgm-exporter
      containers:
      - image: quay.io/openshift-psap/dcgm #nvidia/dcgm-exporter:1.4.6
        name: nvidia-dcgm-exporter
        env:
        - name: PYTHONPATH
          value: "/usr/src/dcgm/bindings"
        command: ["python", "/usr/src/dcgm/samples/scripts/dcgm_prometheus.py", "-e", "-p", "9600"]
        securityContext:
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
#        volumeMounts:
#        - name: collector-textfiles
#          mountPath: /run/prometheus

      hostNetwork: true
      hostPID: true

      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
#      - name: collector-textfiles
#        emptyDir:
#          medium: Memory

      nodeSelector:
        node-role.kubernetes.io/worker: ""
        feature.node.kubernetes.io/pci-10de.present: "true"

